app.py
from flask import Flask, render_template, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
from data_models import db, Author, Book
import requests

app = Flask(__name__)

# Set the SQLite database URI for SQLAlchemy
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///data/library.sqlite'

# Create the SQLAlchemy instance
# db = SQLAlchemy(app)
db.init_app(app)


@app.route('/add_author', methods=['GET', 'POST'])
def add_author():
    if request.method == 'POST':
        # Extract author information from the form
        name = request.form['name']
        birth_date = datetime.strptime(request.form['birth_date'], '%Y-%m-%d').date()
        date_of_death = datetime.strptime(request.form['date_of_death'], '%Y-%m-%d').date()

        # Use the add_author method from the Author class
        Author.add_author(name=name, birth_date=birth_date, date_of_death=date_of_death)

        # Display success message on the /add_author page
        return render_template('add_author.html', message='Author added successfully!')

    # For GET request, render the add_author.html form
    return render_template('add_author.html')


@app.route('/add_book', methods=['GET', 'POST'])
def add_book():
    if request.method == 'POST':
        # Extract author information from the form
        title = request.form['title']
        isbn = request.form['isbn']
        publication_year = request.form['publication_year']
        author_id = request.form['author_id']

        # Use the add_book method from the book class
        Book.add_book(title=title, isbn=isbn, publication_year=publication_year, author_id=author_id)

        # Display success message on the /add_book page
        return render_template('add_book.html', message='Book added successfully!')

    # Fetch authors' data from the database
    authors = Author.query.all()

    # For GET request, render the add_book.html form with the authors data
    return render_template('add_book.html', authors=authors)


@app.route('/')
def home():
    # QUERY the book table to fetch all books data
    books = Book.query.all()

    # Prepare the books data in a format the Jinja code in the HTML file expects
    books_data = []
    for book in books:
        book_info ={
            'title': book.title,
            'isbn': book.isbn,
            'publication_year': book.publication_year,
            'author_name': book.author
        }
        # Fetch the book's cover image using Google Books API (change API endpoint if needed)
        response = requests.get(f'https://www.googleapis.com/books/v1/volumes?q=isbn:{book.isbn}')
        if response.status_code == 200:
            data = response.json()
            if 'items' in data and len(data['items']) > 0:
                cover_link = data['items'][0]['volumeInfo'].get('imageLinks', {}).get('thumbnail', '')
                book_info['cover_image'] = cover_link
            else:
                book_info['cover_image'] = ''  # Set a default image link if not found
        else:
            book_info['cover_image'] = ''  # Set a default image link if API request fails

        books_data.append(book_info)

    # Pass the books data to the render_template function
    return render_template('home.html', books=books_data)


if __name__ == "__main__":
    # Create the tables within a Flask application context
    with app.app_context():
        db.create_all()
    # Start the Flask development server
    # from data_models import Author
    # app.run(debug=True)
    # app.run(host="0.0.0.0", port=5002)
    app.run(debug=True)

data_models.py

# data_models.py

from datetime import datetime
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()


class Author(db.Model):

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    birth_date = db.Column(db.Date, nullable=True)
    date_of_death = db.Column(db.Date, nullable=True)

    def __repr__(self):
        return f"Author(id={self.id}, name='{self.name}', birth_date={self.birth_date}, date_of_death={self.date_of_death})"

    @classmethod
    def add_author(cls, name, birth_date, date_of_death):
        # Create a new Author record in the database
        author = cls(name=name, birth_date=birth_date, date_of_death=date_of_death)
        db.session.add(author)
        db.session.commit()
        return author


class Book(db.Model):

    id = db.Column(db.Integer, primary_key=True)
    isbn = db.Column(db.String(20))
    title = db.Column(db.String(100), nullable=False)
    publication_year = db.Column(db.Integer)
    author_id = db.Column(db.Integer, db.ForeignKey('author.id'), nullable=False)
    author = db.relationship('Author', backref=db.backref('book', lazy=True))

    def __repr__(self):
        return f"Book(id={self.id}, isbn='{self.isbn}', title='{self.title}', publication_year={self.publication_year}, author_id={self.author_id})"


